std::msg () {
	# message function. We are building in additional functionality, to make it simple to create messages to standard
	# out with color and text formatting. Only one argument is needed, the message. We will default to the default
	# color and format if none are passed
	# arguments:
	#           1: message
	#           2: text format
	#           3: "status" to display
	local lib_standard_msg_MESSAGE="$1";
	local lib_standard_msg_FORMAT="$2";
	local lib_standard_msg_STATUS="$3";
	local lib_standard_msg_FORMAT_COMMAND=;
	local lib_standard_msg_FORMAT_LIST="$(echo "$lib_standard_msg_FORMAT" | tr ' ' '_')";
	lib_standard_msg_FORMAT_LIST="$(echo "$lib_standard_msg_FORMAT_LIST" | tr ',' '\n')";
	for i in ${lib_standard_msg_FORMAT_LIST}; do
		local lib_standard_msg_FORMATTING=;
		# for each arg in our formatting, let's parse it, set it to the correct 
		# colour variable, and then format. This let's use be less strict with 
		# what needs to be passed, allowing "red" vs. "TEXT_RED"
		local lib_standard_msg_arg="$(echo "$i" | tr '[:upper:]' '[:lower:]')";
		case "${lib_standard_msg_arg}" in
			"red" | "text_red")
				lib_standard_msg_FORMATTING="TEXT_RED";
				;;
			"green" | "text_green")
				lib_standard_msg_FORMATTING="TEXT_GREEN";
				;;
			"yellow" | "text_yellow")
				lib_standard_msg_FORMATTING="TEXT_YELLOW";
				;;
			"blue" | "text_blue")
				lib_standard_msg_FORMATTING="TEXT_BLUE";
				;;
			"magenta" | "text_magenta")
				lib_standard_msg_FORMATTING="TEXT_MAGENTA";
				;;
			"cyan" | "text_cyan" | "light_blue" | "text_light_blue" | "lightblue" | "text_lightblue")
				lib_standard_msg_FORMATTING="TEXT_CYAN";
				;;
			"red_background" | "red_bg" | "text_red_bg")
				lib_standard_msg_FORMATTING="TEXT_RED_BG";
				;;
			"green_background" | "green_bg" | "text_green_bg")
				lib_standard_msg_FORMATTING="TEXT_GREEN_BG";
				;;
			"yellow_background" | "yellow_bg" | "text_yellow_bg")
				lib_standard_msg_FORMATTING="TEXT_YELLOW_BG";
				;;
			"blue_background" | "blue_bg" | "text_blue_bg")
				lib_standard_msg_FORMATTING="TEXT_BLUE_BG";
				;;
			"magenta_backgroung" | "magenta_bg" | "text_magenta_bg")
				lib_standard_msg_FORMATTING="TEXT_MAGENTA_BG";
				;;
			"bold" | "strong" | "text_bold")
				lib_standard_msg_FORMATTING="TEXT_BOLD";
				;;
			"underline" | "text_underline")
				lib_standard_msg_FORMATTING="TEXT_UNDERLINE";
				;;
			*)
				lib_standard_msg_FORMATTING="TEXT_DEFAULT";
				;;
		esac
		lib_standard_msg_FORMAT_COMMAND="${!lib_standard_msg_FORMATTING};${lib_standard_msg_FORMAT_COMMAND}";
	done;
	if [[ -n "$lib_standard_msg_STATUS" ]]; then
		local lib_standard_msg_STATUS_DISPLAY=;
		lib_standard_msg_STATUS="$(echo ${lib_standard_msg_STATUS} | tr '[:upper:]' '[:lower:]')";
		case "${lib_standard_msg_STATUS}" in
			"ok" | "okay")
				lib_standard_msg_STATUS_DISPLAY="$(${TEXT_DEFAULT};echo -n "[";${TEXT_GREEN};${TEXT_BOLD}; echo -n "   OK   ";${TEXT_DEFAULT}; echo -n "]";)";
				;;
			"alert")
				lib_standard_msg_STATUS_DISPLAY="$(${TEXT_DEFAULT};echo -n "[";${TEXT_RED};${TEXT_BOLD}; echo -n " ALERT! ";${TEXT_DEFAULT}; echo -n "]";)";
				;;
			"notice")
				lib_standard_msg_STATUS_DISPLAY="$(${TEXT_DEFAULT};echo -n "[";${TEXT_BLUE};${TEXT_BOLD}; echo -n " NOTICE ";${TEXT_DEFAULT}; echo -n "]";)";
				;;
			*)
				lib_standard_msg_STATUS_DISPLAY=;
				;;
		esac
	fi
	eval "${lib_standard_msg_FORMAT_COMMAND}";
	printf "%b" "$lib_standard_msg_MESSAGE";
	if [[ -n "$lib_standard_msg_STATUS_DISPLAY" ]]; then
		let lib_standard_msg_RES_COL=`tput cols`-12;
        tput cuf $lib_standard_msg_RES_COL;
        tput cuu1;
		printf "${lib_standard_msg_STATUS_DISPLAY}\n";
	fi
	${TEXT_DEFAULT};
}
