#!/usr/bin/env bash
# we use /usr/bin/env to make this compatible over multiple operating systems, where the location of bash changes
# 
# Framework Library
#
# Gorian                                                                    


## Here we define our constants ##
# THIS IS IMPORTANTS. WE SOURCE OUR LIBRARY FROM THIS DIRECTORY
LIBRARY_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# GET THE SYSTEM TYPE, linux, solaris, aix, bsd, etc.
SYSTEM_TYPE="$(uname -s)";
# SunOS=Solaris, Linux=Linux (Ubuntu, Redhat, Suse, etc.), HP-UX=HP-UX


COMPANY_NAME='';
TAB='    ';
# Define our colours
# foreground colours
TEXT_RED="tput setaf 1"
TEXT_GREEN="tput setaf 2"
TEXT_YELLOW="tput setaf 3"
TEXT_BLUE="tput setaf 4"
TEXT_MAGENTA="tput setaf 5"
TEXT_CYAN="tput setaf 6"
TEXT_LIGHT_BLUE="$CYAN"
# background colours
TEXT_RED_BG="tput setab 1"
TEXT_GREEN_BG="tput setab 2"
TEXT_YELLOW_BG="tput setab 3"
TEXT_BLUE_BG="tput setab 4"
TEXT_MAGENTA_BG="tput setab 5"
TEXT_CYAN_BG="tput setab 6"
# text formatting
TEXT_BOLD="tput bold"
TEXT_UNDERLINE="tput sgr 0 1"
TEXT_DEFAULT="tput sgr0"
#
LIB_MODULE_LIST=("main"); # initialize our list of loaded modules
LIB_CLASS_LIST=;
LIB_FUNCTION_LIST=;


## functions (define here only functions used in the framework.)
source_all() {
	for i in $(ls ${LIBRARY_DIRECTORY} | grep ^.*\.lib); do
		librequire $i;
	done
}

source_basic() {
	# list of basic libraries to source
	. ${LIBRARY_DIRECTORY}/string.lib
	. ${LIBRARY_DIRECTORY}/standard.lib
}

sourcelib(){
	# strip off a trailing ".lib" if there is one, and convert to lowercase
	local lib="$(echo "$1" | awk -F".lib" '{print $1}' | tr '[:upper:]' '[:lower:]')"; 
	. ${LIBRARY_DIRECTORY}/${lib}.lib;
}

librequire(){
	# accepts a single argument, the library required
	local module="$(echo "$1" | awk -F".lib" '{print $1}' | tr '[:upper:]' '[:lower:]')";
	local loaded='FALSE';
	local forRange="$(eval "echo {0..${#LIB_MODULE_LIST[@]}}")";
	for i in $forRange; do
		if [ "${LIB_MODULE_LIST[$i]}" == "${module}" ]; then
			loaded='TRUE';
		fi
	done
	if [ "$loaded" == "FALSE" ]; then
		sourcelib ${module};
	fi
}

constant() {
	declare -r $@;
}

load() {
	local className="$1";
	local moduleName="$2";
	new ${className} ${className}; # we initialize only a single instance of a class
	LIB_MODULE_LIST=("${LIB_MODULE_LIST[@]}" "$moduleName"); # add this module to the list of loaded modules
}

## ERROR HANDLING


## Here we source our other libraries (AFTER we define our CONSTANTS) ##
# lets us create psuedo classes; All of our other scripts require this, so it has to be loaded first.
. ${LIBRARY_DIRECTORY}/object_support.lib 
# if no arguments are specified, load all libraries
if [ -z "$1" ]; then 
	source_all
	unset $@;
fi
while [ -n "$1" ]; do
	case "$1" in
		"all" | "default")
			source_all;
			break; # since we are just sourcing everything else, break and don't parse any more arguments
			;;
		"basic")
			source_basic;
			shift;
			;;
		*)
			librequire $1;
			shift;
			;;
	esac
done
